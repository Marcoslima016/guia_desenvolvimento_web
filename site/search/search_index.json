{
    "config": {
        "lang": [
            "en"
        ],
        "min_search_length": 3,
        "prebuild_index": false,
        "separator": "[\\s\\-]+"
    },
    "docs": [
        {
            "location": "",
            "text": "Flutter ERP Docs \uf0c1",
            "title": "Flutter ERP Docs"
        },
        {
            "location": "#flutter-erp-docs",
            "text": "",
            "title": "Flutter ERP Docs"
        },
        {
            "location": "primeiros_passos/criar_modulo/",
            "text": "Criar modulo \uf0c1 Instru\u00e7\u00f5es de como criar um modulo gen\u00e9rico. Modulos gen\u00e9ricos s\u00e3o todos os outros m\u00f3dulos que existem al\u00e9m do modulo system. A aplica\u00e7\u00e3o \u00e9 composta do modulo System, referente a aplica\u00e7\u00e3o em si (O sistema). O system por sua vez \u00e9 formado por v\u00e1rios m\u00f3dulos gen\u00e9ricos. 1. Criar diret\u00f3rio \uf0c1 Dentro da pasta modulos crie uma pasta com o nome do novo modulo. Em seguida, dentro dessa nova pasta crie os arquivos seguindo a estrutura b\u00e1sica de um modulo, conforme imagem abaixo: Nos pr\u00f3ximos passos iremos preencher os conte\u00fados dos arquivos criados, por enquanto podem ficar vazios. 2. Estrutura e arquivos \uf0c1 Nesse pr\u00f3ximo passo iremos entender cada arquivo que comp\u00f5e a estrutura de um m\u00f3dulo. Arquivo .modulo \uf0c1 O arquivo que possui a extens\u00e3o \".modulo\" \u00e9 o arquivo de acesso e configura\u00e7\u00e3o do nosso modulo. Esse arquivo disponibiliza a view e o controller do nosso modulo. Confira abaixo como deve ficar o conte\u00fado do arquivo, utilizando como exemplo um modulo chamado \"produtos\". import 'package:custom_app/custom_app/custom_app.imports.dart' ; import 'package:custom_app/custom_app/web_app/web_app.imports.dart' ; import 'package:flutter/material.dart' ; import 'produtos.view.dart' ; class Produtos implements WebAppModulo { @override String displayName = \"Produtos\" ; @override int idModulo = 1 ; # ( 1 ) @override WebModuleView get view => WebModuleView . basic ( widget: ProdutosView ( displayName: displayName , /// A view recebe o parametro 'displayName' modulo: this , /// A view recebe o porametro 'modulo' ), ); @override MenuPiece menuPiece = MenuPiece . apartButton ( buttonTitle: \"Produtos\" , // Texto do bot\u00e3o menuPos: 1 , // Posi\u00e7\u00e3o do bot\u00e3o no menu icon: Icons . person_outline , // Icone do bot\u00e3o ); } 1. I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be expressed in Markdown. Arquivo .view \uf0c1 O arquivo que possui a extens\u00e3o \".view\" ser\u00e1 respons\u00e1vel pela parte visual do nosso modulo. Existem situa\u00e7\u00f5es onde esse arquivo n\u00e3o ser\u00e1 usado, por exemplo no caso de um modulo composto que n\u00e3o possui uma view, mas cont\u00e9m submodulos onde estes sim possuem suas respectivas views. Pra ficar mais f\u00e1cil de entender, pegue como exemplo um modulo chamado clientes, que tem a tarefa de gerenciar os clientes da empresa. O modulo clientes em si n\u00e3o possui a camada view, mas este modulo cont\u00e9m dois sub-modulos: clientes_formulario e clientes_relat\u00f3rio, onde cada um desses submodulos possuem a sua camada view. 3. Publicar o modulo \uf0c1",
            "title": "Criar modulo gen\u00e9rico"
        },
        {
            "location": "primeiros_passos/criar_modulo/#criar-modulo",
            "text": "Instru\u00e7\u00f5es de como criar um modulo gen\u00e9rico. Modulos gen\u00e9ricos s\u00e3o todos os outros m\u00f3dulos que existem al\u00e9m do modulo system. A aplica\u00e7\u00e3o \u00e9 composta do modulo System, referente a aplica\u00e7\u00e3o em si (O sistema). O system por sua vez \u00e9 formado por v\u00e1rios m\u00f3dulos gen\u00e9ricos.",
            "title": "Criar modulo"
        },
        {
            "location": "primeiros_passos/criar_modulo/#1-criar-diretorio",
            "text": "Dentro da pasta modulos crie uma pasta com o nome do novo modulo. Em seguida, dentro dessa nova pasta crie os arquivos seguindo a estrutura b\u00e1sica de um modulo, conforme imagem abaixo: Nos pr\u00f3ximos passos iremos preencher os conte\u00fados dos arquivos criados, por enquanto podem ficar vazios.",
            "title": "1. Criar diret\u00f3rio"
        },
        {
            "location": "primeiros_passos/criar_modulo/#2-estrutura-e-arquivos",
            "text": "Nesse pr\u00f3ximo passo iremos entender cada arquivo que comp\u00f5e a estrutura de um m\u00f3dulo.",
            "title": "2. Estrutura e arquivos"
        },
        {
            "location": "primeiros_passos/criar_modulo/#arquivo-modulo",
            "text": "O arquivo que possui a extens\u00e3o \".modulo\" \u00e9 o arquivo de acesso e configura\u00e7\u00e3o do nosso modulo. Esse arquivo disponibiliza a view e o controller do nosso modulo. Confira abaixo como deve ficar o conte\u00fado do arquivo, utilizando como exemplo um modulo chamado \"produtos\". import 'package:custom_app/custom_app/custom_app.imports.dart' ; import 'package:custom_app/custom_app/web_app/web_app.imports.dart' ; import 'package:flutter/material.dart' ; import 'produtos.view.dart' ; class Produtos implements WebAppModulo { @override String displayName = \"Produtos\" ; @override int idModulo = 1 ; # ( 1 ) @override WebModuleView get view => WebModuleView . basic ( widget: ProdutosView ( displayName: displayName , /// A view recebe o parametro 'displayName' modulo: this , /// A view recebe o porametro 'modulo' ), ); @override MenuPiece menuPiece = MenuPiece . apartButton ( buttonTitle: \"Produtos\" , // Texto do bot\u00e3o menuPos: 1 , // Posi\u00e7\u00e3o do bot\u00e3o no menu icon: Icons . person_outline , // Icone do bot\u00e3o ); } 1. I'm a code annotation! I can contain code , formatted text , images, ... basically anything that can be expressed in Markdown.",
            "title": "Arquivo .modulo"
        },
        {
            "location": "primeiros_passos/criar_modulo/#arquivo-view",
            "text": "O arquivo que possui a extens\u00e3o \".view\" ser\u00e1 respons\u00e1vel pela parte visual do nosso modulo. Existem situa\u00e7\u00f5es onde esse arquivo n\u00e3o ser\u00e1 usado, por exemplo no caso de um modulo composto que n\u00e3o possui uma view, mas cont\u00e9m submodulos onde estes sim possuem suas respectivas views. Pra ficar mais f\u00e1cil de entender, pegue como exemplo um modulo chamado clientes, que tem a tarefa de gerenciar os clientes da empresa. O modulo clientes em si n\u00e3o possui a camada view, mas este modulo cont\u00e9m dois sub-modulos: clientes_formulario e clientes_relat\u00f3rio, onde cada um desses submodulos possuem a sua camada view.",
            "title": "Arquivo .view"
        },
        {
            "location": "primeiros_passos/criar_modulo/#3-publicar-o-modulo",
            "text": "",
            "title": "3. Publicar o modulo"
        }
    ]
}